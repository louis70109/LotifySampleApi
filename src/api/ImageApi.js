/**
 * lotify_sample_api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ImageUrlRequestBody from '../model/ImageUrlRequestBody';
import NotifyResponse from '../model/NotifyResponse';

/**
* Image service.
* @module api/ImageApi
* @version 0.0.1
*/
export default class ImageApi {

    /**
    * Constructs a new ImageApi. 
    * @alias module:api/ImageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the sendImageFile operation.
     * @callback module:api/ImageApi~sendImageFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotifyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send LINE Noitfy text message with file
     * @param {File} file Upload file
     * @param {String} message Send LINE Noitfy text message
     * @param {String} token LINE Notify access token
     * @param {module:api/ImageApi~sendImageFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotifyResponse}
     */
    sendImageFile(file, message, token, callback) {
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling sendImageFile");
      }
      // verify the required parameter 'message' is set
      if (message === undefined || message === null) {
        throw new Error("Missing the required parameter 'message' when calling sendImageFile");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sendImageFile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
        'message': message,
        'token': token
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*', 'application/json'];
      let returnType = NotifyResponse;
      return this.apiClient.callApi(
        '/notify/file', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendImageUrl operation.
     * @callback module:api/ImageApi~sendImageUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotifyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send LINE Noitfy text message with image url
     * @param {module:model/ImageUrlRequestBody} body Send LINE Noitfy text message with image url
     * @param {module:api/ImageApi~sendImageUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotifyResponse}
     */
    sendImageUrl(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendImageUrl");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = NotifyResponse;
      return this.apiClient.callApi(
        '/notify/url', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
