/**
 * lotifySampleApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StickerRequestBody model module.
 * @module model/StickerRequestBody
 * @version 0.0.1
 */
class StickerRequestBody {
    /**
     * Constructs a new <code>StickerRequestBody</code>.
     * @alias module:model/StickerRequestBody
     * @param token {String} 
     * @param message {String} 
     * @param stickerId {Number} 
     * @param packageId {Number} 
     */
    constructor(token, message, stickerId, packageId) { 
        
        StickerRequestBody.initialize(this, token, message, stickerId, packageId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, token, message, stickerId, packageId) { 
        obj['token'] = token;
        obj['message'] = message;
        obj['sticker_id'] = stickerId;
        obj['package_id'] = packageId;
    }

    /**
     * Constructs a <code>StickerRequestBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StickerRequestBody} obj Optional instance to populate.
     * @return {module:model/StickerRequestBody} The populated <code>StickerRequestBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StickerRequestBody();

            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('sticker_id')) {
                obj['sticker_id'] = ApiClient.convertToType(data['sticker_id'], 'Number');
            }
            if (data.hasOwnProperty('package_id')) {
                obj['package_id'] = ApiClient.convertToType(data['package_id'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {String} token
 */
StickerRequestBody.prototype['token'] = undefined;

/**
 * @member {String} message
 */
StickerRequestBody.prototype['message'] = undefined;

/**
 * @member {Number} sticker_id
 */
StickerRequestBody.prototype['sticker_id'] = undefined;

/**
 * @member {Number} package_id
 */
StickerRequestBody.prototype['package_id'] = undefined;






export default StickerRequestBody;

